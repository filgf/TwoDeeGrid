{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Twodeegrid","body":"# Instructions for TwoDeeGrid\r\n\r\n## What is TwoDeeGrid?\r\n\r\nThe `TwoDeeGrid` is a graphical environmal for experimenting in Java. It consists of a Grid of square coloured cells that can be altered programmatically.\r\n\r\n![](pic/hello.png)\r\n\r\nIt has the following main features:\r\n\r\n* Creating grids of arbitrary size\r\n* Colouring the cells in different ways\r\n* Input from keyboard and mouse\r\n* Waiting time spans\r\n\r\n## First Steps\r\n\r\n### Download and Installation\r\n\r\nCopy the current version from [here](https://raw.github.com/zyxxylabs/TwoDeeGrid/master/dist/TwoDeeGrid.zip)  and unpack the archive.\r\n\r\nCreate a Java-Project in Eclipse in drag the file `twodeegrid.jar` onto the project-name in the Package Explorer on the left side. In the following dialog select the option *Copy files* and click *OK*.\r\n\r\n`twodeegrid.jar` should now appear in your project. Now, the library must be made usable for your own programs: Right-click `twodeegrid.jar` and select the menu entry *Build Path -> Add to build path*.\r\n\r\nYou can create your own classes via the menu *File -> New -> Class\". Insert the following code as the first line after your package declaration:\r\n\r\n``` {.java}\r\nimport twodeegrid.*;\r\n```\r\n\r\n### \"Hello World\"\r\n\r\nA simple code example: First the grid is initialized to consist of 3x3 cells and the have the window title \"Hello World\". Then the upper left cell (coordinate X=0, Y=0) is coloured red:\r\n\r\n``` {.java}\r\nimport twodeegrid.*;\r\n\r\npublic class HelloWorld {\r\n\tprivate static void main(String[] args) {\r\n\t\tTwoDeeGrid g = new TwoDeeGrid(3, 3, \"Hello World\");\r\n\t\tg.setColorAt(0, 0, CellColor.RED);\r\n\t}\r\n}\r\n```\r\n\r\nThe result when running the program:\r\n\r\n![](pic/HelloWorld.png)\r\n\r\nThe grid stays on screen after the main-method finishes execution. The program is only finished when the window is manually closed by clicking on the close-symbol.\r\n\r\n### The Grid\r\n![](pic/Coords.png)\r\n\r\nThe Grid consists of square cells, that can be adressed using their horizontal (X) and their vertical (Y) coordinate. Coordinates are counted starting with 0. The upper left corner ist X=0, Y=0.\r\n\r\n\r\n### Initializing the Grid\r\nThe grid can be initialized and shown by creating a `TwoDeeGrid` Object. Two different constructors are defined:\r\n\r\n``` {.java}\r\npublic TwoDeeGrid()\r\npublic TwoDeeGrid(int xSize, int ySize, String title)\r\n```\r\n\r\nThe first variant creates a standard grid with the size 8x8. The second constructor can be used to define an arbitrarily sized grid with a specific windwo title. The size of the single cells is adapted automatically depending on the screen resolution.\r\n\r\n## Cell Colors\r\n\r\n### Setting Cell Colors\r\n``` {.java}\r\npublic void setColorAt(int x, int y, CellColor color)\r\n```\r\n\r\n`setColorAt` colors the cell with the coordinate 'x' and 'y'. The third parameter is the cell color to set. The color can be given directly based on color constants (see [Color Constants](#color-constants)) or generated randomly using different provided methods (see [Random Colors](#random-colors)).\r\n\r\nAll coordinate values are calculated *modulo* the size of the `TwoDeeGrid`. This means that for a coordinate x equal or larger the size of the raster, counting restarts at the left side of the grid. A value smaller than 0 adresses a cell counting from the right side of the `TwoDeeGrid`.\r\n\r\nThe following example...\r\n\r\n``` {.java}\r\nTwoDeeGrid g = new TwoDeeGrid(4,4, \"TwoDeeGrid\");\r\ng.setColorAt(1, 3, CellColor.YELLOW);\r\ng.setColorAt(-1, 0, CellColor.RED);\r\ng.setColorAt(4, 1, CellColor.GREEN);\r\ng.setColorAt(2, -1, CellColor.BLUE);\r\ng.setColorAt(103, 2, CellColor.BLACK);\r\n```\r\n\r\n...yields:\r\n\t\t\r\n![](pic/Modulo.png)\r\n\r\n``` {.java}\r\npublic void clear()\r\n```\r\n\r\n`clear()` deletes the grid and resets its values to their white base color.\r\n\r\n### Reading Cell Colors\r\n\r\n``` {.java}\r\nCellColor getColorAt(int x, int y)\r\n```\r\n\r\nreturns the color at position x,y. Der value can be compared with the predefined [constants](#color-constants). \r\n\r\nExample:\r\n\r\n``` {.java}\r\nif (g.getColorAt(1, 3) == CellColor.YELLOW) {\r\n  // Your Program here...\r\n}\r\n```\r\n\r\n### Color Constants\r\n\r\nAll color constants are provided by the class `CellColor`:\r\n\r\n![](pic/Colors.png)\r\n\r\nThe white cell color plays a special role: It stands for a uncolored cell in the grid. Its constant is `CellColor.NONE`.\r\n\r\nExample:\r\n\r\n``` {.java}\r\nTwoDeeGrid g = new TwoDeeGrid(3, 3, \"Hello World\");\r\ng.setColorAt(1, 1, CellColor.GREEN_LIGHT);\r\n```\r\n\r\n### Random Colors\r\n\r\nColor values can be created randomly: \r\n\r\n``` {.java}\r\npublic static CellColor getRandomCellColor() \r\n```\r\n\r\n...returns a `CellColor`-object of random color.\r\n\r\n``` {.java}\r\npublic static CellColor getRandomRedBlue() \r\n```\r\n\r\n...randomly returns `CellColor.RED` or `CellColor.BLUE`.\r\n\r\n``` {.java}\r\npublic static CellColor getRandomOnOff() \r\n```\r\n\r\n...randomly returns `CellColor.NONE` or `CellColor.BLACK`.\r\n\r\n``` {.java}\r\npublic static CellColor getRandomOnOff(double probabilityOn) \r\n```\r\n\r\n\r\n...randomly returns `CellColor.NONE` or `CellColor.BLACK`. The parameter `probabilityOn` is the probability that the returned value is \"on\" (e.g. black). 0.0 means 0% probability, 1.0 means 100% probability, 0.5 is 50%,...\r\n\r\n\r\n## Working with the Grid as an Array\r\n\r\n``` {.java}\r\npublic CellColor[][] getCellArray()\r\n```\r\n\r\nreturns a copy of the whole `TwoDeeGrid` as a two-dimensional array of color values (`CellColor`). The array can be altered freely. Changes will not instantly get visible, but can be given back to the grid with the following method:\r\n\r\n``` {.java}\r\npublic void updateCellArray(CellColor[][] cells)\r\n```\r\n\r\nUsing the array instead of working with `getColorAt()` und `setColorAt()` pays off when a large number (or all) cells should be altered at once.\r\n\r\nThe following code example...\r\n\r\n``` {.java}\r\nTwoDeeGrid g = new TwoDeeGrid(5, 5, \"Hello Array!\");\r\n\r\nCellColor[][] cells = g.getCellArray();\r\n\r\nfor (int x = 0; x < cells.length; x++) {\r\n  for (int y = 0; y < cells[x].length; y++) {\r\n    cells[x][y] = CellColor.getRandomRedBlue();\r\n  }\r\n}\r\n\t\t\r\ng.updateCellArray(cells);\r\n```\r\n\r\n...yields:\r\n\r\n![](pic/HelloArray.png)\r\n\r\n\r\n## Keeping Track of Time\r\n\r\n``` {.java}\r\npublic void waitTime(double time)\r\n```\r\n\r\nstops the program execution for a given time span. The parameter `time` sets the time spand  in seconds. \r\n\r\n`waitTime` can be used for dynamics changes or animations. The following example creates a grid with a blinking red square in the middle:\r\n\r\n\r\n``` {.java}\r\nTwoDeeGrid g = new TwoDeeGrid(3, 3, \"Blink!\");\r\n\r\nwhile(true) {\r\n  g.setColorAt(1, 1, CellColor.RED);\r\n  g.waitTime(0.3);\r\n  g.setColorAt(1, 1, CellColor.NONE);\r\n  g.waitTime(0.6);\r\n}\r\n```\r\n\r\n## User Input\r\n\r\nA program can be made interactive via user input. `TwoDeeGrid` has two possibilities: mouse (or touchscreen) input and the keyboard.\r\n\r\n### Mouse Input\r\n\r\n``` {.java}\r\npublic MouseClick waitMouseClick()\r\n```\r\n\r\nwaits until the user clicks on a cell. The method then returns an object of type `MouseClick`.\r\n\r\n`MouseClick` holds information about the click that can be accessed using the following methods:\r\n\r\n``` {.java}\r\npublic int getX()\r\npublic int getY()\r\npublic int getType()\r\n```\r\n\r\n`getX()` and `getY()` return the X- and Y-coordinate of the selected cell. `getType()` returns which mouse button was pressed: the left (`MouseClick.LEFT`), the right (`MouseClick.RIGHT`) or the middle (`MouseClick.MIDDLE`) mouse button.\r\n\r\nThe following example allows to paint on the grid using the mouse:\r\n``` {.java}\r\npublic static void main(String[] args) {\r\n  TwoDeeGrid g = new TwoDeeGrid(5,5, \"TwoDeeGrid\");\r\n  \r\n  while(true) {\r\n    MouseClick click = g.waitMouseClick();\r\n    g.setColorAt(click.getX(), click.getY(), CellColor.getRandomCellColor());\r\n  }\r\n}\r\n```\r\n\r\n### Keyboard Input\r\n\r\n``` {.java}\r\npublic int getKeyPressed()\r\n```\r\n\r\nreturns the last key that has been pressed on the keyboard. Contrary to `waitMouseClick()` `getKeyPressed()` does *not* wait until a key has been pushed.\r\n\r\nThe different key pressed events are encoded in the JDK class [`KeyEvent`](http://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html). If no key was pressed `KeyEvent.CHAR_UNDEFINED` is returned.\r\n\r\nThe following example opens a narrow window. The green square can be moved left and right using the arrow keys:\r\n\r\n``` {.java}\r\nTwoDeeGrid g = new TwoDeeGrid(9, 1, \"Press LEFT/RIGHT\");\r\nint pos = 4; \r\nint key;\r\n\r\nwhile (true) {\r\n  g.clear();\r\n  g.setColorAt(pos, 0, CellColor.GREEN);\r\n  \r\n  do {\r\n    key = g.getKeyPressed();\r\n  } while (key == KeyEvent.CHAR_UNDEFINED);\r\n  \r\n  switch (key) {\r\n  case KeyEvent.VK_LEFT:\r\n    pos--;\r\n    break;\r\n  case KeyEvent.VK_RIGHT:\r\n    pos++;\r\n    break;\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Reference (Classes and Methods)\r\n\r\n### TwoDeeGrid\r\n\r\n* `public TwoDeeGrid(int xSize, int ySize, String title)` \\\r\n  Creates a grid with dimensions `xSize` x `ySize` and the title `title`.\r\n\r\n* `public TwoDeeGrid()` \\\r\n  Creates a grid with dimensions 8x8.\r\n\r\n* `public int getGridSizeX()`\\\r\n  Returns the rasters width (number of cells).\r\n\r\n* `public int getGridSizeY()`\\\r\n  Returns the rasters height (number of cells).\r\n\r\n* `public CellColor getColorAt(int x, int y)`\\\r\n  Returns the color value at position (`x`,`y`). (0, 0) means the upper left corner.\r\n\r\n* `public void setColorAt(int x, int y, CellColor color)`\\\r\n  Sets the color value at position (`x`,`y`) to `color`. (0, 0) means the upper left corner.\r\n\r\n* `public void clear()`\\\r\n  Clears the grid and colors all cells white.\r\n\r\n* `public CellColor[][] getCellArray()`\\\r\n  Returns the grid as a two-dimensional array. The color values can be accessed with `cell[x][y]`.\r\n\r\n* `public void updateCellArray(CellColor[][] cells)`\\\r\n  Sets the grid cells to the color values in the array `cells`.\r\n\r\n* `public void waitTime(double time)`\\\r\n  Waits `time` seconds.\r\n\r\n* `public MouseClick waitMouseClick()`\\\r\n  Waits until one of the cells was clicked. Returns an object with additional information.\r\n\r\n* `public int getKeyPressed()`\\\r\n  Returns the keycode for the last pressed key. The keys codes are defined in [`KeyEvent`](http://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html).\r\n\r\n\r\n### CellColor\r\n\r\n* `public static CellColor getRandomCellColor()`\\\r\n  Returns a random color value.\r\n\r\n* `public static CellColor getRandomRedBlue()`\\\r\n  Randomly returns `CellColor.RED` or `CellColor.BLUE`.\r\n\r\n* `public static CellColor getRandomOnOff()`\\\r\n  Randomly returns `CellColor.BLACK` or `CellColor.NONE`.\r\n\r\n* `public static CellColor getRandomOnOff(double probabilityOn)`\\\r\n  Randomly returns `CellColor.BLACK` (with probability `probabilityOn`) or `CellColor.NONE` (with probability `1 - probabilityOn`).\r\n  \r\nDefined color constants: see [Color Constants](#color-constants).\r\n\r\n### MouseClick\r\n\r\n* `public int getX()`\\\r\n  X-coordinate of the clicked cell.\r\n\r\n* `public int getY()`\\\r\n  Y-coordinate of the clicked cell.\r\n\r\n* `public int getType()`\\\r\n  pushed mouse button (`MouseClick.LEFT`, `MouseClick.RIGHT` or `MouseClick.MIDDLE`).","google":"","tagline":"A playground for learning Java"}